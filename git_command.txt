Skip to content
This repository
Search
Pull requests
Issues
Gist
 @stormily
 Unwatch 1
  Star 0
  Fork 0 stormily/my_first
 Code  Issues 0  Pull requests 0  Wiki  Pulse  Graphs  Settings
Branch: two Find file Copy pathmy_first/git_command.txt
a08e4a9  9 minutes ago
@stormily stormily rebase
1 contributor
RawBlameHistory     114 lines (92 sloc)  5.46 KB
关于git的文件提交
$ git status (显示有变更的文件)
$ git add . (添加当前目录的所有文件到暂存区) // . 表示当前目录 .. 表示上一级目录
$ git commit -m"注释内容" (提交暂存区到仓库区)
$ git commit -am"注释内容" (-a 表示add, 可以把修改和删除的文件自动添加然后提交，但是新增的文件还是需要add)
$ git push  (把当前分支推送到远程，当前分支就是命令里括号里新的显示，它关联的远程分支可以用 git branch -vv看
$ git push origin [local_branch_name]:[remote_branch_name] (push完成命令，通常后面省略，git自动推送关联)

关于git的文件修改
$ git status 显示文件是否修改 (若输入后显示working directory clean则说明当前无需要的提交)
$ git diff   显示文件的具体修改内容

关于git的文件修改版本查看
$ git log 可以查看文件修改的历史记录
$ git log --pretty=oneline 在一行显示一次提交
[会显示commit Author Date 三项内容以及修改]
(commit id:一长串数字为一次提交的唯一哈希值)

关于git的文件版本回退
$ git reset --hard
HEAD :  当前版本，最新的提交
HEAD^:  上一个版本
HEAD^^: 上上一个版本
HEAD~**:往上**个版本 ]
如果不小心回退到过早版本，可以通过版本id进行恢复到“未来”版本
当新版本id找不到时，
$ git reflog (记录每一次命令，命令历史 history)

关于git的远程仓库的建立
# 增加一个新的远程仓库，并命名
$ git remote add [shortname] [url]  (注：shortname自己命名 url 远程git对应网址)
$ git remote -v 查看所有远程仓库
$ git remote show origin 查看远程主机origin所有信息
// github 推荐到网页新建项目，勾上README，然后本地新建个目录, clone下来

关于git分支的切换
$ git branch    (列出本地所有分支)
$ git branch -r (列出远程所有分支)
$ git checkout -b [branch-name] (新建分支)   (相当于 $ git branch dev    $git checkout dev)
$ git push -u origin [branch-name] (将新建分支推送至远程)
$ git branch -vv (查看本地所有分支 和 其关联的上游分支)
$ git checkout - (切换至上一分支)
$ git checkout  [branch-name] (切换至指定分支)
$ git branch -d [branch-name] (删除本地分支)
$ git push origin :[branch-name] (删除远程分支，原理是推送一个空覆盖掉远程分支)
$ git merge [branch-name](合并某分支到当前分支)
$ ls (查看当前目录下的文件 linux命令)

关于git远程文件下载到本地
$ git pull  下载远程对应分支到本地

关于git的自带帮助查看
$ git [command_name] --help
eg.:  git push --help

关于分支的merge
//TO-DO

关于分支merge 与 rebase的应用
$git merge 用于合并指定分支到当前分支
单线的简单分支在合并时会出现“Fast forward”提示，这种合并进程称为快进，没有需要解决的分歧

关于三路合并：如果没有冲突，则可以直接简单合并；
              如果发生冲突，则可以使用git diff 命令查看，在对冲突进行编辑后，解决后可直接提交
              任何包含未解决冲突的文件都会以未合并（unmerged）的状态列出
              ======= 隔开的上半部分，是 HEAD (master分支，运行merge命令时切换到的分支)
                            下半部分，是 new_branch 中的内容
              修改时须修改分支内容，避免冲突，同时删除 <<<<<<<，======= 和 >>>>>>>
$ git mergetool:调用一个可视化的合并工具引导解决冲突
最后再次使用 $ git status 确保所有冲突已解决

$ git rebase 该命令则是把整个[new_branch]移动至master分支后面，有效并入提交


$ gitk 显示项目的历史  
$ git log --graph --pretty=oneline --abbrev-commit 查看分支历史

当在某一分支下修改文件而未push时切换分支会出现错误提示：
error: Your local changes to the following files would be overwritten by checkout
Please,commit your changes or stash them before you can switch branches Aborting
即选择提交至暂存区或者保留工作现场



merge rebase命令的优缺点：
merge是一个安全的操作，现有分支不会被更改
另一方面，这同样意味着每次合并上游更改时feature分支都会引入一个外来的合并提交。
如果master非常活跃的话，这或多或少会污染你的分支历史。虽然运用git log 选项可以减轻这个问题，会增加理解项目历史的难度；

rebase它会把整个feature分支移动到master分支的后面，有效把所有master分支上新的提交并入过来。同时，它为原分支上每一个提交创建一个新的提交，重写了项目历史，并且不会带来合并提交。
rebase最大优势： 项目历史整洁 
不存在merge引入的非必要的合并提交，同时rebase会使项目历史呈现线性，从头至尾浏览不需要fork，查看项目历史更加便捷。
rebase最大劣势：简单的提交历史会影响 安全性和可跟踪性。
此外。rebase 不会有合并提交中附带的信息，无法查看分支中并入了上游的哪些修改。
分支管理策略：
master 分支为稳定分支，平时修改应在其他分支 

bug分支 feature分支


------------------------
[vocabulary]
status  :状态
commit  :提交
log     :日志
reset   :复位
reflog  :引用日志   // reference log 
remote  :远程
view    :查看
upstream:上游
merge   :合并；使合并；
rebase  :复位基底
checkout:检出；检测；检验
fork    :分歧；分叉
